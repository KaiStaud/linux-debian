#!/usr/bin/make -f
# You must remove unused comment lines for the released package.
#export DH_VERBOSE = 1
#export DEB_BUILD_MAINT_OPTIONS = hardening=+all
#export DEB_CFLAGS_MAINT_APPEND  = -Wall -pedantic
#export DEB_LDFLAGS_MAINT_APPEND = -Wl,--as-needed
PWD:=$(shell pwd)
REL:=5.10.178

DEB_DIR:=$(PWD)/debian
TMP_DIR:=$(DEB_DIR)/tmp
BUILD_DIR:=$(DEB_DIR)/build

MOD_PATH:=$(TMP_DIR)
ifeq ($(in_kernel_firmware), 1)
FW_PATH:=$(TMP_DIR)/lib/firmware
else
FW_PATH:=
endif
KERNEL_PATH:=$(TMP_DIR)/boot
HDR_PATH:=$(TMP_DIR)/usr
KERNEL_HDR_PATH:=$(TMP_DIR)/usr/src/linux-headers-$(REL)
DTBS_PATH:=$(TMP_DIR)/usr/lib/linux-image-$(REL)

ARCH:=arm
SRCARCH:=$(ARCH)

MAKE_OPTS= ARCH=$(ARCH) KERNELRELEASE=$(REL) LOADADDR=0x800800 INSTALL_MOD_PATH=$(MOD_PATH) INSTALL_HDR_PATH=$(HDR_PATH) INSTALL_PATH=$(KERNEL_PATH) INSTALL_DTBS_PATH=$(DTBS_PATH) O=$(BUILD_DIR)

clean:
	echo "No clean please"
	echo "Work-Dir=$(PWD)"
	git config --global --add safe.directory $(PWD)
distclean:
	echo "NO distclean"
override_dh_auto_clean:
	echo "Skipping clean"
	mkdir -p debian/build
	rm -f debian/files
	rm -rf debian/tmp
	$(MAKE) $(MAKE_OPTS) clean
override_dh_distclean:
	echo "Skipping distclean"
override_dh_configure:
	echo "'\033[0;31m'------- MAKE CONFIG ----------'\033[0m'"
	$(MAKE) $(MAKE_OPTS) stm32mp157a-dk1_defconfig
override_dh_auto_install:
override_dh_auto_build:
#	mkdir -p debian/build
#override_dh_auto_build:
#	rm -rf include/config
	mkdir -p $(MOD_PATH) $(FW_PATH) $(HDR_PATH) $(KERNEL_PATH) $(DTBS_PATH)
	echo "'\033[0;31m'------- MAKE CONFIG ----------'\033[0m'"
	$(MAKE) $(MAKE_OPTS) stm32mp157a-dk1_defconfig 
	$(MAKE) stm32mp157a-dk1_defconfig
	echo "'\033[0;31m'------- MAKE BUILD ----------'\033[0m'"
	$(MAKE) $(MAKE OPTS)
#override_dh_auto_install:
#	echo "-----------MAKE HEADERS InsTALl------"
#	$(MAKE) $(MAKE_OPTS) headers_install
#	echo "Build kernel header package"
#	rm -f "$(TMP_DIR)/lib/modules/$(REL)/build" "$(TMP_DIR)/lib/modules/$(REL)/source"
#	find . -name Makefile\* -o -name Kconfig\* -o -name \*.pl > $(DEB_DIR)/hdrsrcfiles
#	find arch/*/include include scripts -type f >> $(DEB_DIR)/hdrsrcfiles
#	find arch/$(SRCARCH) -name module.lds -o -name Kbuild.platforms -o -name Platform >> $(DEB_DIR)/hdrsrcfiles
#	find `find arch/$(SRCARCH) -name include -o -name scripts -type d` -type f >> $(DEB_DIR)/hdrsrcfiles
#	if grep -q '^CONFIG_STACK_VALIDATION=y' $(BUILD_DIR)/.config ; then 		(cd $(BUILD_DIR); find tools/objtool -type f -executable) >> $(DEB_DIR)/hdrobjfiles ; 	fi
#	(cd $(BUILD_DIR); find arch/$(SRCARCH)/include Module.symvers include scripts -type f) >> $(DEB_DIR)/hdrobjfiles
#	if grep -q '^CONFIG_GCC_PLUGINS=y' $(BUILD_DIR)/.config ; then 			(cd $(BUILD_DIR); find scripts/gcc-plugins -name \*.so -o -name gcc-common.h) >> $(DEB_DIR)/hdrobjfiles ; 	fi
#	mkdir -p "$(KERNEL_HDR_PATH)"
#	tar -c -f - -T - < "$(DEB_DIR)/hdrsrcfiles" | (cd $(KERNEL_HDR_PATH); tar -xf -)
#	(cd $(BUILD_DIR); tar -c -f - -T -) < "$(DEB_DIR)/hdrobjfiles" | (cd $(KERNEL_HDR_PATH); tar -xf -)
#	(cd $(BUILD_DIR); cp $(BUILD_DIR)/.config $(KERNEL_HDR_PATH)/.config) # copy .config manually to be where it's expected to be
#	ln -sf "/usr/src/linux-headers-$(REL)" "$(TMP_DIR)/lib/modules/$(REL)/build"
#	rm -f "$(DEB_DIR)/hdrsrcfiles" "$(DEB_DIR)/hdrobjfiles"
%:
	dh $@  

#override_dh_auto_install:
#	dh_auto_install -- prefix=/usr

override_dh_install:
	echo "-------make install------------"
#	dh_install --list-missing -X.pyc -X.pyo
